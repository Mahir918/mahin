{"version":3,"sources":["Page/Input.js","store/actions/postActions.js","store/actions/Types.js","Page/Table.js","App.js","serviceWorker.js","store/redux/reducers.js","store/redux/index.js","store/Store.js","index.js"],"names":["Input","state","name","changeHandelar","e","setState","target","value","submitHandelar","preventDefault","profile","props","addData","className","onSubmit","this","htmlFor","type","placeholder","id","autoComplete","wish","onChange","Component","connect","auth","dataTodo","dispatch","axios","post","then","response","payload","data","catch","error","console","log","Table","getData","scope","map","result","index","key","_id","onClick","removeData","get","delete","App","Boolean","window","location","hostname","match","dataReducer","action","unshift","filter","tran","rootReducer","combineReducers","Reducer","middleware","Thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.00203fbd.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {addData} from '../store/actions/postActions'\r\n\r\nclass Input extends Component {\r\n    state = {\r\n        name: ''\r\n    }\r\n    changeHandelar = e =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    submitHandelar =e =>{\r\n        e.preventDefault()\r\n        const profile = {\r\n            name : this.state.name\r\n        }\r\n        this.props.addData(profile)\r\n        this.setState({\r\n            name: ''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 offset-md-3\">\r\n                    <h1 className=\"text-center display-4\">To-Do App</h1>\r\n                    <form onSubmit={this.submitHandelar}>\r\n                        <div className=\"form-group\">\r\n                        <label htmlFor='wish'>Todo: </label>\r\n                        <input \r\n                                type=\"text\"\r\n                                className='form-control'\r\n                                placeholder=\"Enter Your Wish\"\r\n                                name=\"name\"\r\n                                id=\"wish\"\r\n                                autoComplete=\"off\"\r\n                                value={this.state.wish}\r\n                                onChange={this.changeHandelar}\r\n                            />\r\n                        </div>\r\n                        <button className=\"btn btn-primary my-3 d-block\">Submit</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state =>({\r\n    auth:state.auth\r\n})\r\n\r\nexport default connect(mapStateToProps,{addData})(Input)","import * as Types from './Types'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nexport const addData = dataTodo => dispatch =>{\r\n    axios\r\n        .post('/api/post/', dataTodo)\r\n        .then(response => {\r\n            dispatch({\r\n                type:Types.CREATE_DATA,\r\n                payload:{\r\n                    dataTodo: response.data\r\n                }\r\n            })\r\n        })\r\n        .catch(error =>{\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport const getData = () => dispatch =>{\r\n    axios\r\n        .get('/api/post/')\r\n        .then(response =>{\r\n            dispatch({\r\n                type: Types.SET_USER,\r\n                payload:{\r\n                    result: response.data\r\n                    \r\n                }\r\n            })\r\n        })\r\n        .catch(error =>{\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport const removeData = id => dispatch =>{\r\n    axios.delete(`/api/post/${id}`)\r\n    .then(response =>{\r\n        dispatch({\r\n            type:Types.REMOVE_DATA,\r\n            payload:{\r\n                id:response.data._id\r\n            }\r\n        })\r\n    })\r\n}\r\n","export const SET_USER = 'SET_USER'\r\nexport const CREATE_DATA = 'CREATE_DATA'\r\nexport const REMOVE_DATA = 'REMOVE_DATA'","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getData,removeData } from '../store/actions/postActions'\r\n\r\nclass Table extends Component {\r\n    componentDidMount() {\r\n        this.props.getData()\r\n    }\r\n    render() {\r\n        let { auth } = this.props\r\n        return (\r\n            <div className=\"row\">\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Last</th>\r\n                            <th scope=\"col\">Handle</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            auth.map((result, index) => (\r\n                                <tr key={result._id}>\r\n                                    <th scope=\"row\">{index + 1}</th>\r\n                                    <td>{result.name}</td>\r\n                                    <td onClick={()=>this.props.removeData(result._id)} className=\"btn btn-danger\">Remove</td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n})\r\nexport default connect(mapStateToProps, { getData,removeData })(Table)","import React from 'react';\nimport './App.css';\nimport Input from './Page/Input' \nimport Table from  './Page/Table'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <Input />\n        <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as Types from '../actions/Types'\r\n\r\nconst dataReducer = (state = [],action) =>{\r\n    switch (action.type){\r\n        case Types.SET_USER:{\r\n            return action.payload.result\r\n        }\r\n        case Types.CREATE_DATA:{\r\n            let data = [...state]\r\n            data.unshift(action.payload.dataTodo)\r\n            return data\r\n        }\r\n        case Types.REMOVE_DATA:{\r\n            let data = [...state]\r\n            return data.filter(tran =>{\r\n                return tran._id !== action.payload.id\r\n            })\r\n        }\r\n        default : return state\r\n    }\r\n}\r\n\r\nexport default dataReducer","import {combineReducers} from 'redux'\r\nimport Reducer from './reducers'\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: Reducer\r\n})\r\n\r\nexport default rootReducer","import {createStore,applyMiddleware,compose} from 'redux'\r\nimport Thunk from 'redux-thunk'\r\nimport rootReducer from  './redux/index' \r\n\r\nconst middleware  = [Thunk]\r\nconst initialState = {}\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeEnhancers(\r\n        applyMiddleware(...middleware)\r\n    )\r\n)\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './store/Store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}